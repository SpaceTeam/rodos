image: nixos/nix:latest

stages:
 - build_test
 - results
 - deploy

.cov_tmpl:
  stage: build_test
  script:
    - nix-build with-cmake.nix -A $TARGET
    - mkdir $TARGET
    - mv result/* $TARGET/
  artifacts:
    paths:
    - $TARGET
    when: always
    expire_in: 1 week

.compile_tmpl:
  stage: build_test
  script:
    - nix-build with-cmake.nix -A $TARGET

linux-x86:
  extends: .cov_tmpl
  variables:
    TARGET: linux-x86

linux-makecontext:
  extends: .cov_tmpl
  variables:
    TARGET: linux-makecontext

posix:
  extends: .cov_tmpl
  variables:
    TARGET: posix

sf2:
  extends: .compile_tmpl
  variables:
    TARGET: sf2

raspberrypi3:
  extends: .compile_tmpl
  variables:
    TARGET: raspberrypi3

stm32f4:
  extends: .compile_tmpl
  variables:
    TARGET: stm32f4

coverage:
  stage: results
  needs:
    - job: linux-x86
      artifacts: true
    - job: linux-makecontext
      artifacts: true
    - job: posix
      artifacts: true
  script:
    - nix-env -i lcov binutils
    - lcov -a $(echo */coverage.info | sed -e 's@ @ -a @g') --output-file coverage.info
    - genhtml --demangle-cpp -o coverage coverage.info
  artifacts:
    paths:
    - coverage.info
    - coverage
    expire_in: 1 week

test-report:
  stage: results
  needs:
    - job: linux-x86
      artifacts: true
    - job: linux-makecontext
      artifacts: true
    - job: posix
      artifacts: true
  variables:
    GIT_STRATEGY: none
  script:
    - failures=None
    - for r in */test-report.txt; do if [ ! -s $r ]; then echo "$r error free!"; else echo "$r contains ERRORS!"; failures=yes; fi; done
    - if [ $failures != None ]; then exit 1; fi

codecov.io:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - nix-env -i curl
    - nix-env -i bash
    - curl https://codecov.io/bash -o codecov
    - bash codecov -f coverage.info
  needs:
    - job: coverage
      artifacts: true
